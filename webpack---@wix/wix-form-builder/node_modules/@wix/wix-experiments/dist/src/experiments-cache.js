"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getCacheInstance = exports.NullCache = exports.ExperimentsRequestsCache = void 0;
var tslib_1 = require("tslib");
var experiments_data_utils_1 = require("./experiments-data-utils");
var urlMap_1 = require("./urlMap");
var ExperimentsRequestsCache = /** @class */ (function() {
    function ExperimentsRequestsCache() {
        this.urlMap = new Map();
    }
    ExperimentsRequestsCache.prototype.addUrlResponse = function(url, response) {
        this.urlMap.set(url, response);
    };
    ExperimentsRequestsCache.prototype.getUrlResponse = function(url) {
        return this.urlMap.get(url);
    };
    ExperimentsRequestsCache.prototype.getExperimentValue = function(specName, useNewApi) {
        var e_1, _a;
        try {
            for (var _b = tslib_1.__values(this.urlMap.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var url = _c.value;
                if (urlMap_1.isUrlOfExperiment(url, specName, useNewApi)) {
                    return this.urlMap.get(url);
                } else if (urlMap_1.isValidScopeUrl(url, useNewApi)) {
                    var jsonObject = experiments_data_utils_1.tryParse(this.urlMap.get(url));
                    if (typeof jsonObject === 'object' && specName in jsonObject) {
                        return jsonObject[specName];
                    }
                }
            }
        } catch (e_1_1) {
            e_1 = {
                error: e_1_1
            };
        } finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            } finally {
                if (e_1) throw e_1.error;
            }
        }
    };
    return ExperimentsRequestsCache;
}());
exports.ExperimentsRequestsCache = ExperimentsRequestsCache;
var NullCache = /** @class */ (function() {
    function NullCache() {}
    NullCache.prototype.addUrlResponse = function() {
        //
    };
    NullCache.prototype.getUrlResponse = function() {
        //
    };
    NullCache.prototype.getExperimentValue = function() {
        //
    };
    return NullCache;
}());
exports.NullCache = NullCache;

function getCacheInstance() {
    if (process.env.NODE_ENV !== 'production') {
        return new NullCache();
    }
    if (self.experimentsCache === undefined) {
        self.experimentsCache = new ExperimentsRequestsCache();
    }
    return self.experimentsCache;
}
exports.getCacheInstance = getCacheInstance;
//# sourceMappingURL=experiments-cache.js.map