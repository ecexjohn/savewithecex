import {
    env
} from '../env';
/**
 * env().performance wrappers
 */

export default {
    getNavigation: function getNavigation() {
        return typeof env() !== 'undefined' && env().performance ? env().performance.navigation : {};
    },

    /**
     * get all loaded resources
     */
    getResources: function getResources() {
        var emptyVal = [];

        try {
            return env() && env().performance && env().performance.getEntriesByType && env().performance.getEntriesByType('resource') || emptyVal;
        } catch (e) {
            return emptyVal;
        }
    },

    /**
     * get all loaded resources
     */
    getMarks: function getMarks() {
        var emptyVal = [];

        try {
            return env() && env().performance && env().performance.getEntriesByType && env().performance.getEntriesByType('mark') || emptyVal;
        } catch (e) {
            return emptyVal;
        }
    },
    getTiming: function getTiming() {
        return env() && env().performance ? env().performance.timing : {};
    },
    clearResourceTimings: function clearResourceTimings() {
        env() && env().performance && env().performance.clearResourceTimings && env().performance.clearResourceTimings();
    },

    /**
     * Duration relative to navigation start (env().performance.timing.navigationStart)
     * fallback to: performance.now -> now (nodejs) -> getTime()
     */
    now: function now() {
        if (env() && env().performance && env().performance.now) {
            return env().performance.now();
        } else if (typeof performance !== 'undefined' && performance && performance.now) {
            return performance.now();
        }

        return new Date().getTime();
    },

    /**
     * Duration from fetch start to response end
     */
    responseEndTime: function responseEndTime() {
        if (typeof performance !== 'undefined' && performance && performance.timing && performance.timing.responseEnd && performance.timing.fetchStart) {
            return performance.timing.responseEnd - performance.timing.fetchStart;
        }
    },

    /**
     * Create a performance timestamp
     */
    mark: function mark(name) {
        env() && env().performance && env().performance.mark && env().performance.mark(name);
    },

    /**
     * Record a performance measurement
     */
    measure: function measure(name, startMark, endMark) {
        env() && env().performance && env().performance.measure && env().performance.measure(name, startMark, endMark);
    }
};