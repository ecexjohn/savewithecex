import {
    getImageComputedProperties
} from '../../utils/imageUtils';
import {
    setStyle
} from '../../utils/domUtils';

function didImageChange(currentImageUrlCss, newUrl) {
    if (currentImageUrlCss === void 0) {
        currentImageUrlCss = '';
    }

    return !currentImageUrlCss.includes(newUrl) || !!currentImageUrlCss !== !!newUrl;
}

function updateUrl(domNode, imageCssUrl) {
    var image = new Image();
    image.onload = setStyle.bind(null, domNode, {
        backgroundImage: "url(\"" + imageCssUrl + "\")"
    });
    image.src = imageCssUrl;
}

function measure(id, measures, domNodes, containerId, services) {
    var bgImage = domNodes[id];
    var container = domNodes[containerId];

    if (services.isExperimentOpen('bv_media_layout_by_effect') || services.isExperimentOpen('specs.thunderbolt.tb_media_layout_by_effect')) {
        measures.width = bgImage.offsetWidth;
    } else {
        measures.width = bgImage.dataset.hasBgScrollEffect ? container.offsetWidth : bgImage.offsetWidth;
    }

    measures.height = bgImage.offsetHeight;
    measures.currentSrc = bgImage.style.backgroundImage;
    measures.bgEffectName = bgImage.dataset.bgEffectName;
}

function patch(id, measures, domNodes, imageInfo, envConsts) {
    var bgImage = domNodes[id];
    imageInfo.containerWidth = measures.width;
    imageInfo.containerHeight = measures.height;
    var imageTransformData = getImageComputedProperties(imageInfo, envConsts, 'bg');

    if (didImageChange(measures.currentSrc, imageTransformData.uri)) {
        updateUrl(bgImage, imageTransformData.uri);
    }

    setStyle(bgImage, imageTransformData.css.container);
}

export default {
    measure: measure,
    patch: patch
};
//# sourceMappingURL=bgImageLayout.js.map