import {
    messageTemplates
} from '../../../messages';
import {
    createSchemaValidator
} from '../../../validations/createSchemaValidator';
import {
    reportWarning
} from '../../../reporters';
import {
    effectOptionsForEffectInfoLink,
} from '../../animations';
import {
    effectsValidationSchema
} from './effectValidationSchema';
var createWarningReporter = function(_a) {
    var effectName = _a.effectName,
        propertyName = _a.propertyName,
        compName = _a.compName;
    // TODO - modify schema validator to pass messageParams
    return function(message, messageParams) {
        reportWarning(messageTemplates.warning_invalid_effect_options({
            propertyName: propertyName,
            compName: compName,
            effectName: effectName,
            wrongProperty: 'value',
            wrongValue: "the key \"" + (messageParams === null || messageParams === void 0 ? void 0 : messageParams.propertyName) + "\" cannot be set to the value \"" + (messageParams === null || messageParams === void 0 ? void 0 : messageParams.value) + "\"",
            infoLink: effectOptionsForEffectInfoLink(effectName),
        }));
    };
};
export var createEffectOptionsValidation = function(_a) {
    var propertyName = _a.propertyName,
        compName = _a.compName;
    return function(effectName, effectOptions) {
        if (!effectName || !effectOptions) {
            return false;
        }
        var warningReporter = createWarningReporter({
            effectName: effectName,
            propertyName: propertyName,
            compName: compName,
        });
        var isEffectOptionsValid = function() {
            return createSchemaValidator({
                reportError: warningReporter,
                reportWarning: function() {
                    return ({});
                },
            }, compName)(effectOptions, effectsValidationSchema[effectName], 'hide');
        };
        if (!isEffectOptionsValid()) {
            return false;
        }
        return true;
    };
};
//# sourceMappingURL=effectOptionsValidation.js.map