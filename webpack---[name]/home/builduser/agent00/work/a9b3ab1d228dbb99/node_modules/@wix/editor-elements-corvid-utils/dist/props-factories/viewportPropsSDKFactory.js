var __assign = (this && this.__assign) || function() {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import {
    createCompSchemaValidator
} from '../validations';
export var createViewportPropsSDKFactory = function(registerCallback) {
    return function(_a) {
        var metaData = _a.metaData,
            getSdkInstance = _a.getSdkInstance,
            registerEvent = _a.registerEvent,
            create$w = _a.create$w,
            createEvent = _a.createEvent;
        var functionValidator = function(value, setterName) {
            return createCompSchemaValidator(metaData.role)(value, {
                type: ['function'],
            }, setterName);
        };
        return {
            onViewportEnter: function(cb) {
                if (!functionValidator(cb, 'onViewportEnter')) {
                    return getSdkInstance();
                }
                registerCallback === null || registerCallback === void 0 ? void 0 : registerCallback('onViewPortEnter', function() {
                    var corvidEvent = createEvent({
                        type: 'viewportEnter'
                    });
                    var $w = create$w();
                    cb(corvidEvent, $w);
                });
                registerEvent('onViewportEnter', function(event) {
                    var corvidEvent = __assign(__assign({}, event), {
                        type: 'viewportEnter'
                    });
                    var $w = create$w();
                    cb(corvidEvent, $w);
                });
                return getSdkInstance();
            },
            onViewportLeave: function(cb) {
                if (!functionValidator(cb, 'onViewportLeave')) {
                    return getSdkInstance();
                }
                registerCallback === null || registerCallback === void 0 ? void 0 : registerCallback('onViewPortLeave', function() {
                    var corvidEvent = createEvent({
                        type: 'viewportLeave'
                    });
                    var $w = create$w();
                    cb(corvidEvent, $w);
                });
                registerEvent('onViewportLeave', function(event) {
                    var corvidEvent = __assign(__assign({}, event), {
                        type: 'viewportLeave'
                    });
                    var $w = create$w();
                    cb(corvidEvent, $w);
                });
                return getSdkInstance();
            },
        };
    };
};
//# sourceMappingURL=viewportPropsSDKFactory.js.map