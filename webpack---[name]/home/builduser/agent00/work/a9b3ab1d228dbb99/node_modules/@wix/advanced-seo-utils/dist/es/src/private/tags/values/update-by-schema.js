import {
    buildTagByValueAndSchema
} from '../utils/build-tag-by-value';
import {
    isEmpty
} from '../../utils/is-empty';
import {
    validateTagStructure
} from '../utils/validate-tag-structure';
export var updateValueBySchema = function(tags, tagSchema, value, meta, isDisabled) {
    if (tags === void 0) {
        tags = [];
    }
    var tag = buildTagByValueAndSchema(value, tagSchema, {
        meta: meta,
        isDisabled: isDisabled
    });
    if (isEmpty(tag) || !Array.isArray(tags)) {
        return tags;
    }
    var tagIndex = findTagIndexBySchema(tags, tagSchema);
    var updatedTags = removeTagBySchema(tags, tagSchema) || [];
    if (value !== '' || isDisabled) {
        if (tagIndex !== -1) {
            updatedTags.splice(tagIndex, 0, tag);
        } else {
            updatedTags.push(tag);
        }
    }
    return updatedTags;
};

function removeTagBySchema(tags, tagSchema) {
    var tagIndex = findTagIndexBySchema(tags, tagSchema);
    if (tagIndex !== -1) {
        var newTags = tags
            .slice(0, tagIndex)
            .concat(tags.slice(tagIndex + 1, tags.length));
        return removeTagBySchema(newTags, tagSchema);
    } else {
        return tags.slice();
    }
}

function findTagIndexBySchema(tags, tagSchema) {
    if (isEmpty(tagSchema) || isEmpty(tags)) {
        return -1;
    }
    var tagIndexDistanceFromEnd = tags
        .slice()
        .reverse()
        .findIndex(function(tag) {
            return validateTagStructure(tag, tagSchema);
        });
    return tagIndexDistanceFromEnd === -1 ?
        -1 :
        tags.length - 1 - tagIndexDistanceFromEnd;
}