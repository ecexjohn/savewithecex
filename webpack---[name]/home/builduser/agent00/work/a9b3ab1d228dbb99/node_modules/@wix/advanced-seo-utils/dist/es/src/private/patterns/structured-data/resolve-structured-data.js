export function resolveStructuredData(structuredDataString) {
    if (structuredDataString === void 0) {
        structuredDataString = '{}';
    }
    try {
        var dataObject = JSON.parse(structuredDataString);
        return clearEmptyFields({
            dataObject: dataObject
        });
    } catch (error) {
        return '{}';
    }
}

function clearEmptyFields(_a) {
    var _b = _a === void 0 ? {} : _a,
        _c = _b.dataObject,
        dataObject = _c === void 0 ? {} : _c,
        containerObject = _b.containerObject,
        containerKey = _b.containerKey;
    if (!dataObject) {
        return '{}';
    }
    Object.entries(dataObject).forEach(function(_a) {
        var key = _a[0],
            val = _a[1];
        if (val && typeof val === 'object') {
            clearEmptyFields({
                dataObject: val,
                containerObject: dataObject,
                containerKey: key,
            });
        } else {
            if (!val) {
                if (isKeyRequired(key, containerObject && containerObject[containerKey])) {
                    delete containerObject[containerKey];
                } else {
                    delete dataObject[key];
                }
            }
        }
    });
    return JSON.stringify(dataObject);
}

function isKeyRequired(key, container) {
    var requiredKeys = ['url', 'contentUrl'];
    if (key === 'name') {
        if (requiredKeys.includes(Object.keys(container))) {
            return false;
        }
    }
    return requiredKeys.includes(key);
}