var __assign = (this && this.__assign) || function() {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import {
    TAG_TYPES
} from '../../types/TagTypes';
export var cleanBlackListedTags = function(tags) {
    if (tags === void 0) {
        tags = [];
    }
    return tags.map(function(tag) {
        switch (tag.type) {
            case TAG_TYPES.LINK:
                return getSantitizedLink(tag);
            default:
                return tag;
        }
    });
};

function getSantitizedLink(tag) {
    if (tag === void 0) {
        tag = {};
    }
    return cleanedValue(tag.props && tag.props.rel).includes('stylesheet') ?
        __assign(__assign({}, tag), {
            props: __assign(__assign({}, tag.props), {
                rel: ''
            })
        }) : tag;
}

function cleanedValue(val) {
    if (val === void 0) {
        val = '';
    }
    return val.toLowerCase().trim();
}