"use strict";
var __assign = (this && this.__assign) || function() {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, {
        enumerable: true,
        get: function() {
            return m[k];
        }
    });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
        for (var k in mod)
            if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.manager = exports.factory = exports.Factory = void 0;
var wix_bi_logger_client_1 = require("@wix/wix-bi-logger-client");
var browser_1 = require("./lib/browser");
var assert = __importStar(require("./lib/assert"));
var publishers_1 = require("./lib/publishers");
var utils_1 = require("./lib/utils");
var consentPolicy = __importStar(require("./lib/consent-policy"));
var common_config_1 = require("./lib/common-config");
var env_1 = require("./lib/env");
var constants_1 = require("./constants");
var types_1 = require("./types");
var types_2 = require("./types");
Object.defineProperty(exports, "PublishMethods", {
    enumerable: true,
    get: function() {
        return types_2.PublishMethods;
    }
});
Object.defineProperty(exports, "EventCategories", {
    enumerable: true,
    get: function() {
        return types_2.EventCategories;
    }
});
var env_2 = require("./lib/env");
Object.defineProperty(exports, "setHost", {
    enumerable: true,
    get: function() {
        return env_2.setHost;
    }
});
var transformContext = function(context) {
    return Object.keys(context).reduce(function(res, key) {
        if (constants_1.EventContextMap[key] && typeof context[key] !== 'undefined') {
            res[constants_1.EventContextMap[key]] = context[key];
        }
        return res;
    }, {});
};
var getDefaults = function(commonConfigGetter) {
    var res = transformContext({
        brandId: function() {
            return getBrand(commonConfigGetter);
        },
        ms: function() {
            return Math.round(browser_1.now());
        },
    });
    return res;
};
var getUserContext = function() {
    return utils_1.getCookies({
        clientId: '_wixCIDX',
        uuid: {
            name: '_wixUIDX',
            transform: function(value) {
                return typeof value === 'string' && value.split('|')[1];
            },
        },
    });
};
var getBrand = function(commonConfigGetter) {
    return common_config_1.getCommonConfigValue('brand', commonConfigGetter());
};
var validatePublishMethod = function(publishMethod) {
    return (Object.keys(types_1.PublishMethods)
        .map(function(key) {
            return types_1.PublishMethods[key];
        })
        .indexOf(publishMethod) !== -1);
};
var Factory = /** @class */ (function() {
    function Factory(options) {
        if (options === void 0) {
            options = {};
        }
        this.options = options;
        this.commonConfigGetter = function() {
            return undefined;
        };
        this.initialized = false;
        this.muted = false;
        assert.ok(!options.publishMethod || validatePublishMethod(options.publishMethod), "Unsupported publish method \"" + options.publishMethod + "\"");
        this.loggerClientFactory = wix_bi_logger_client_1.factory();
    }
    Factory.prototype.initFactory = function() {
        var _this = this;
        if (this.initialized) {
            return this.loggerClientFactory;
        }
        this.initialized = true;
        this.updateDefaults(getDefaults(this.commonConfigGetter));
        this.withUserContext(getUserContext());
        var options = __assign(__assign({}, this.options), {
            host: this.options.host || (function() {
                return env_1.getHost(getBrand(_this.commonConfigGetter));
            })
        });
        var publisher = publishers_1.getPublisher(options, this.transformer, this.publishFunctions);
        return this.loggerClientFactory.addPublisher(publisher);
    };
    Factory.prototype.withTransformer = function(transformer) {
        assert.defined(transformer, 'Transformer must be provided');
        assert.ok(typeof transformer === 'function' ||
            (transformer && typeof transformer.postMessage === 'function'), 'Valid transformer must be provided');
        this.transformer = transformer;
        return this;
    };
    Factory.prototype.withPublishFunction = function(publishFunctions) {
        assert.defined(publishFunctions, 'Publish function must be provided');
        assert.ok(publishFunctions && typeof publishFunctions.postMessage === 'function', 'Valid publish function must be provided');
        this.publishFunctions = publishFunctions;
        return this;
    };
    Factory.prototype.withUserContext = function(context) {
        assert.defined(context, 'User context object must be provided');
        this.updateDefaults(transformContext(context));
        return this;
    };
    Factory.prototype.withUoUContext = function(context) {
        assert.defined(context, 'UoU context object must be provided');
        this.updateDefaults(transformContext(context));
        return this;
    };
    Factory.prototype.withCommonConfigGetter = function(commonConfigGetter) {
        assert.defined(commonConfigGetter, 'Common config getter must be provided');
        assert.ok(typeof commonConfigGetter === 'function', 'Common config getter must be a function');
        this.commonConfigGetter = commonConfigGetter;
        return this;
    };
    Factory.prototype.withConsentPolicyGetter = function(_consentPolicyGetter) {
        return this;
    };
    Factory.prototype.updateDefaults = function(params) {
        this.loggerClientFactory.updateDefaults(params);
        return this;
    };
    Factory.prototype.setMuted = function(muted) {
        this.muted = muted;
        return this;
    };
    Factory.prototype.setEvents = function(events) {
        this.loggerClientFactory.setEvents(events);
        return this;
    };
    Factory.prototype.onError = function(handler) {
        this.loggerClientFactory.setPublisherFailHandler(handler);
        return this;
    };
    Factory.prototype.logger = function(options) {
        if (options === void 0) {
            options = {};
        }
        var self = this;
        var useBatch = typeof options.useBatch !== 'undefined' ?
            options.useBatch :
            this.options.useBatch;
        var logger = this.initFactory().logger(__assign(__assign({}, options), {
            useBatch: useBatch
        }));
        return {
            log: function(params, context) {
                var category = context && context.category;
                var shouldMute = self.muted || consentPolicy.shouldMuteByCategory(category);
                if (shouldMute) {
                    return Promise.resolve();
                }
                return logger.log(params, context);
            },
            flush: function() {
                return logger.flush();
            },
        };
    };
    return Factory;
}());
exports.Factory = Factory;
exports.factory = function(options) {
    if (options === void 0) {
        options = {};
    }
    return new Factory(options);
};
exports.manager = wix_bi_logger_client_1.manager;
//# sourceMappingURL=logger.js.map