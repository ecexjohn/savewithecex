import {
    IDENTIFIERS
} from '../types/Identifiers';
import {
    identify
} from './utils/identify';
import {
    getSimplifiedTag
} from '../tags/advanced/get-simplified-tag';
var getIdentifier = function(tag) {
    var identifier = identify(tag);
    if (identifier === IDENTIFIERS.STRUCTURED_DATA) {
        try {
            var jsonData = JSON.parse(tag.children);
            var scriptType = jsonData && jsonData['@type'];
            return identifier + " - " + scriptType;
        } catch (error) {}
    }
    if (!identifier && tag.props && !tag.custom) {
        var simplifiedTag = getSimplifiedTag(tag);
        var simplifiedTagIdentifier = getSimplifiedTagIdentifier(simplifiedTag);
        if (simplifiedTagIdentifier) {
            return simplifiedTagIdentifier;
        }
    }
    return identifier;
};
var getSimplifiedTagIdentifier = function(simplifiedTag) {
    var label = simplifiedTag.label;
    var simplifiedIdentifier = Object.values(IDENTIFIERS).find(function(identifier) {
        return label === identifier.toLowerCase();
    });
    return simplifiedIdentifier || label;
};
export function merge(a, b) {
    var tags = [];
    var uniqueTagCache = {};
    var safeA = Array.isArray(a) ? a : [];
    var safeB = Array.isArray(b) ? b : [];
    var merged = []
        .concat(safeB.some(function(tag) {
                return tag.custom || tag.allowMultiple;
            }) ?
            safeA.filter(function(tag) {
                return !tag.custom && !tag.allowMultiple;
            }) :
            safeA)
        .concat(safeB);
    for (var i = merged.length - 1; i >= 0; i--) {
        var isUniqueTag = !merged[i].allowMultiple;
        var identifier = getIdentifier(merged[i]);
        if (isUniqueTag && identifier) {
            if (!uniqueTagCache[identifier]) {
                tags.unshift(merged[i]);
                uniqueTagCache[identifier] = true;
            }
        } else {
            tags.unshift(merged[i]);
        }
    }
    return tags;
}