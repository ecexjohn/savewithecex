import {
    createCompSchemaValidator
} from '../validations';
import {
    convertToCorvidMouseEvent
} from '../corvidEvents';
import {
    composeSDKFactories
} from '../composeSDKFactories';
import {
    basePropsSDKFactory
} from './basePropsSDKFactory';
import {
    createViewportPropsSDKFactory
} from './viewportPropsSDKFactory';
import {
    createVisibilityPropsSDKFactory
} from './visibilityPropsSDKFactory';
export var toJSONBase = function(_a) {
    var role = _a.role,
        compType = _a.compType,
        isGlobal = _a.isGlobal,
        isRendered = _a.isRendered;
    return ({
        id: role,
        type: "$w." + compType,
        global: isGlobal(),
        rendered: isRendered(),
    });
};
var _elementPropsSDKFactory = function(_a) {
    var registerEvent = _a.registerEvent,
        metaData = _a.metaData,
        getSdkInstance = _a.getSdkInstance,
        create$w = _a.create$w;
    var functionValidator = function(value, setterName) {
        return createCompSchemaValidator(metaData.role)(value, {
            type: ['function'],
        }, setterName);
    };
    return {
        onMouseIn: function(handler) {
            if (!functionValidator(handler, 'onMouseIn')) {
                return getSdkInstance();
            }
            registerEvent('onMouseEnter', function(event) {
                var cleanedEvent = convertToCorvidMouseEvent(event);
                var $w = create$w();
                handler(cleanedEvent, $w);
            });
            return getSdkInstance();
        },
        onMouseOut: function(handler) {
            if (!functionValidator(handler, 'onMouseOut')) {
                return getSdkInstance();
            }
            registerEvent('onMouseLeave', function(event) {
                var cleanedEvent = convertToCorvidMouseEvent(event);
                var $w = create$w();
                handler(cleanedEvent, $w);
            });
            return getSdkInstance();
        },
        get rendered() {
            return metaData.isRendered();
        },
        toJSON: function() {
            return toJSONBase(metaData);
        },
    };
};
var viewportPropsSDKFactory = createViewportPropsSDKFactory();
export var elementPropsSDKFactory = composeSDKFactories(basePropsSDKFactory, viewportPropsSDKFactory, _elementPropsSDKFactory);
export var createElementPropsSDKFactory = function(_a) {
    var _b = (_a === void 0 ? {} : _a).useHiddenCollapsed,
        useHiddenCollapsed = _b === void 0 ? true : _b;
    var visibilityPropsSDKFactory = useHiddenCollapsed ?
        createVisibilityPropsSDKFactory() :
        viewportPropsSDKFactory;
    return composeSDKFactories(basePropsSDKFactory, _elementPropsSDKFactory, visibilityPropsSDKFactory);
};
//# sourceMappingURL=elementPropsSDKFactory.js.map