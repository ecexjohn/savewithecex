import {
    isEmpty
} from '../../utils/is-empty';
import {
    validateTagStructure
} from '../utils/validate-tag-structure';
import {
    TAG_SCHEMAS
} from '../../types/TagSchemas';
import {
    resolvePayload
} from '../../renderer/resolve-payload';
import {
    fillPatternValue
} from '../../patterns/fill-in-pattern-blob';
import {
    IDENTIFIERS
} from '../../types/Identifiers';
export function getValueByIdentifier(tags, identifier) {
    var result = findTag(tags, identifier);
    return result ? getValueFromTag(result, identifier) : result;
}
export function getDisabledByIdentifier(_a, identifier) {
    var tags = (_a === void 0 ? {} : _a).tags;
    var result = findTag(tags, identifier);
    return result ? getDisabledTag(result) : false;
}

function getDisabledTag(tag) {
    if (isEmpty(tag)) {
        return false;
    }
    return tag.disabled;
}
export function getValueByIdentifierFromContext(payload, identifier, context, referencePath) {
    var tags = resolvePayload(payload).tags;
    var result = findTag(tags, identifier);
    return result ?
        getValueFromTagUsingContext(result, identifier, context, tags, referencePath) :
        result;
}
export function getMetaByIdentifier(tags, identifier) {
    var result = findTag(tags, identifier);
    return (result ? result.meta : null) || {};
}
export function getSchemasArray(tags) {
    if (isEmpty(tags)) {
        return [];
    }
    var tagSchema = TAG_SCHEMAS[IDENTIFIERS.STRUCTURED_DATA];
    return tags
        .filter(function(tag) {
            return validateTagStructure(tag, tagSchema);
        })
        .map(function(tag) {
            try {
                return JSON.parse(tagSchema.getValue(tag));
            } catch (e) {
                return {};
            }
        });
}

function findTag(tags, identifier) {
    if (!tags || !identifier) {
        return null;
    }
    var tag = getTagByIdentifier(tags, identifier);
    if (isEmpty(tag)) {
        return undefined;
    }
    return tag;
}

function getTagByIdentifier(tags, identifier) {
    var tagSchema = TAG_SCHEMAS[identifier];
    if (isEmpty(tagSchema) || isEmpty(tags) || !Array.isArray(tags)) {
        return {};
    }
    return tags
        .slice()
        .reverse()
        .find(function(tag) {
            return validateTagStructure(tag, tagSchema);
        });
}

function getValueFromTagUsingContext(tag, identifier, context, tags, referencePath) {
    var tagSchema = identifier && TAG_SCHEMAS[identifier];
    if (isEmpty(tag) || isEmpty(tagSchema)) {
        return '';
    }
    var value = tagSchema.getValue(tag);
    if (value.search(/{{.+?}}/g) !== -1) {
        return fillPatternValue(value, context, tags, referencePath);
    } else {
        return value === 'undefined' ? undefined : value;
    }
}

function getValueFromTag(tag, identifier) {
    var tagSchema = identifier && TAG_SCHEMAS[identifier];
    if (isEmpty(tag) || isEmpty(tagSchema)) {
        return '';
    }
    return tagSchema.getValue(tag);
}